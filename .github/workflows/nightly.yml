name: nightly build

on:
  # To trigger this workflow manually, you can use the following curl command:
  # curl -XPOST -u "USERNAME:PERSONAL_TOKEN" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/awslabs/djl/dispatches --data '{"event_type": "nightly-build"}'

  # Make sure you create your personal token with repo access. Follow steps in
  # https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
  # to create your personal token.
  repository_dispatch:
    types: [nightly-build]
  schedule:
    - cron:  '0 10 * * *'

jobs:
  build:
    if: github.repository == 'awslabs/djl'
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [macos-latest, ubuntu-18.04]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: check disk space
        run: df -h
      - name: Build with Gradle
        run: ./gradlew -Dnightly=true build jRR
      - name: API test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: api
          path: api/build/reports
      - name: basicdataset test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: basicdataset
          path: basicdataset/build/reports
      - name: examples test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: examples
          path: examples/build/reports
      - name: integration test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: integration
          path: integration/build/reports
      - name: model-zoo test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: model-zoo
          path: model-zoo/build/reports
      - name: mxnet-engine test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: mxnet-engine
          path: mxnet/mxnet-engine/build/reports
      - name: mxnet-model-zoo test results
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: mxnet-model-zoo
          path: mxnet/mxnet-model-zoo/build/reports

  test-pytorch:
    if: github.repository == 'awslabs/djl'
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Test with Gradle
        run: ./gradlew :integration:test "-Dai.djl.default_engine=PyTorch"

  test-tensorflow:
    if: github.repository == 'awslabs/djl'
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [macos-latest, ubuntu-18.04]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Test with Gradle
        run: ./gradlew :integration:test "-Dai.djl.default_engine=TensorFlow"

  publish:
    if: github.repository == 'awslabs/djl'
    runs-on: ubuntu-18.04
    needs: [build, test-pytorch, test-tensorflow]
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Publish to snapshot repository
        run: ./gradlew publish -Psnapshot
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ORG_GRADLE_PROJECT_ossrhUsername }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ORG_GRADLE_PROJECT_ossrhPassword }}
      - name: Publish PyTorch Engine CentOS to snapshot repository
        run: ./gradlew clean :pytorch:pytorch-engine:publish -Psnapshot -Pcentos
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ORG_GRADLE_PROJECT_ossrhUsername }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ORG_GRADLE_PROJECT_ossrhPassword }}

  publish-android:
    if: github.repository == 'awslabs/djl'
    runs-on: ubuntu-18.04
    needs: [build, test-pytorch, test-tensorflow]
    env:
      NDK_VERSION: "20.0.5594570"
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Install NDK
        run: echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;${NDK_VERSION}" --sdk_root=${ANDROID_SDK_ROOT}
      - name: publish android core package to Snapshot
        run: |
          export ANDROID_NDK=${ANDROID_HOME}/ndk-bundle
          cd android
          ./gradlew :core:publish -Psnapshot
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ORG_GRADLE_PROJECT_ossrhUsername }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ORG_GRADLE_PROJECT_ossrhPassword }}
